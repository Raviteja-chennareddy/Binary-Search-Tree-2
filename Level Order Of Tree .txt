#include <iostream>
#include <queue>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

void insert(TreeNode*& root, int value) {
    if (root == nullptr) {
        root = new TreeNode(value);
        return;
    }
   
    if (value < root->val) {
        insert(root->left, value);
    } else {
        insert(root->right, value);
    }
}

void levelOrder(TreeNode* root) {
    if (root == nullptr) return;
    queue<TreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        int size = q.size();
        for (int i = 0; i < size; ++i) {
            TreeNode* current = q.front();
            q.pop();
            cout << current->val;
            if (i < size - 1) {
                cout << " ";
            }
            if (current->left != nullptr) {
                q.push(current->left);
            }
            if (current->right != nullptr) {
                q.push(current->right);
            }
        }
        cout << endl;
    }
}
int main() {
    int t;
    cin >> t;
    for (int k = 0; k < t; k++) {
        int N;
        cin >> N;
        TreeNode* root = nullptr;
        for (int i = 0; i < N; ++i) {
            int value;
            cin >> value;
            insert(root, value);
        }
        levelOrder(root);
        if (k < t - 1) {
            cout << endl;
        }
    }
   
    return 0;
}

