#include <iostream>
#include <queue>
using namespace std;
struct Node {
    int val;
    Node *left;
    Node *right;
    Node(int x) : val(x), left(nullptr), right(nullptr) {}
};
void insert(Node *&root, int val) {
    if (root == nullptr) {
        root = new Node(val);
    } else if (val < root->val) {
        insert(root->left, val);
    } else {
        insert(root->right, val);
    }
}
bool isCompleteBinaryTree(Node *root) {
    if (root == nullptr) {
        return true;
    }
    queue<Node*> q;
    q.push(root);
    bool foundNull = false;
    while (!q.empty()) {
        Node *node = q.front();
        q.pop();
        if (node == nullptr) {
            foundNull = true;
        } else {
            if (foundNull) {
                return false;
            }
            q.push(node->left);
            q.push(node->right);
        }
    }
    return true;
}
void deleteBST(Node *&root) {
    if (root == nullptr) {
        return;
    }
    deleteBST(root->left);
    deleteBST(root->right);
    delete root;
    root = nullptr;
}
int main() {
    int T;
    cin >> T;
    while (T--) {
        int N;
        cin >> N;
        Node *root = nullptr;
        for (int i = 0; i < N; ++i) {
            int value;
            cin >> value;
            insert(root, value);
        }
        if (isCompleteBinaryTree(root)) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
        }
        deleteBST(root);
    }
    return 0;
}

